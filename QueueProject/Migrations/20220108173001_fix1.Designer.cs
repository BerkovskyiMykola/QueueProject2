// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QueueProject;

#nullable disable

namespace QueueProject.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220108173001_fix1")]
    partial class fix1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("QueueProject.Models.Place", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("QueueProject.Models.QueuePerson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PlaceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlaceID");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("QueuePeople");
                });

            modelBuilder.Entity("QueueProject.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6ae6d7f9-67ce-48dc-8d5c-3b488357f9e2"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("cc1f8788-91b5-4c45-b150-6a3ec917576b"),
                            Name = "PlaceOwner"
                        },
                        new
                        {
                            Id = new Guid("8547173e-0a6c-46d3-95c1-d9ca793d40b8"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("QueueProject.Models.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a5b75808-c6bf-41b1-aebc-725bf6e3f0f1"),
                            Name = "In queue"
                        },
                        new
                        {
                            Id = new Guid("95b47c8e-80ef-453c-aeb4-e42b7965becb"),
                            Name = "Use"
                        });
                });

            modelBuilder.Entity("QueueProject.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("QueueProject.Models.Place", b =>
                {
                    b.HasOne("QueueProject.Models.User", "User")
                        .WithMany("Places")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("QueueProject.Models.QueuePerson", b =>
                {
                    b.HasOne("QueueProject.Models.Place", "Place")
                        .WithMany("QueuePeople")
                        .HasForeignKey("PlaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueueProject.Models.Status", "Status")
                        .WithMany("QueuePeople")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QueueProject.Models.User", "User")
                        .WithMany("QueuePeople")
                        .HasForeignKey("UserId");

                    b.Navigation("Place");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("QueueProject.Models.User", b =>
                {
                    b.HasOne("QueueProject.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("QueueProject.Models.Place", b =>
                {
                    b.Navigation("QueuePeople");
                });

            modelBuilder.Entity("QueueProject.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("QueueProject.Models.Status", b =>
                {
                    b.Navigation("QueuePeople");
                });

            modelBuilder.Entity("QueueProject.Models.User", b =>
                {
                    b.Navigation("Places");

                    b.Navigation("QueuePeople");
                });
#pragma warning restore 612, 618
        }
    }
}
